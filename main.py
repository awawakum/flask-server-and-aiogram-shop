import os
import handlers
from aiogram import executor, types
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove
from data import config
from loader import dp, db, bot
import filters
import logging
from background import keep_alive  #–∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏

filters.setup(dp)

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.environ.get("PORT", 8000))
user_message = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
admin_message = '–ê–¥–º–∏–Ω'


@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):

  user = db.fetchall(
      f'SELECT * FROM users WHERE telegram_id={message.chat.id}')
  if not user:
    db.query(
        f'INSERT INTO users (cid, telegram_id) VALUES (NULL, {message.chat.id})'
    )

  markup = ReplyKeyboardMarkup(resize_keyboard=True)

  if message.from_user.id in config.ADMINS:
    markup.row(user_message, admin_message)

  await message.answer('''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! 
–Ø –±–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ –∏–º–ø–æ—Ä—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ ü§ñ 
–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —à–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–∞–∑–∏—Ä–æ–≤–æ–∫ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –º–∏—Ä–∞. –í–µ—Å—å –Ω–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–Ω —Å –æ—Å–æ–±—ã–º –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –∫–∞—á–µ—Å—Ç–≤—É –∏ –≤–∫—É—Å—É, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –Ω–∞—Å—Ç–æ—è—â–∏–º –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ–º. –ë–µ—Ä–∏—Ç–µ —É –Ω–∞—Å –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å! ü§ó

üõí –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∏–≥–ª—è–Ω—É–≤—à–∏–µ—Å—è —Ç–æ–≤–∞—Ä—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu.
    ''',
                       reply_markup=markup)


@dp.message_handler(text=user_message)
async def user_mode(message: types.Message):
  await handlers.user.menu.user_menu(message)
  await message.answer('–í–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º.')


@dp.message_handler(text=admin_message)
async def admin_mode(message: types.Message):
  cid = message.chat.id
  if cid in config.ADMINS:
    await handlers.user.menu.admin_menu(message)
    await message.answer('–í–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º.')


async def on_startup(dp):
  logging.basicConfig(level=logging.INFO)
  db.create_tables()

  await bot.delete_webhook()
  await bot.set_webhook(config.WEBHOOK_URL)


async def on_shutdown():
  logging.warning("Shutting down..")
  await bot.delete_webhook()
  await dp.storage.close()
  await dp.storage.wait_closed()
  logging.warning("Bot down")


keep_alive()
if __name__ == '__main__':

  if "HEROKU" in list(os.environ.keys()):

    executor.start_webhook(
        dispatcher=dp,
        webhook_path=config.WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )

  else:

    executor.start_polling(dp, on_startup=on_startup, skip_updates=False)
